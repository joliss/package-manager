struct Manifest:
  pm : String // package manager version
  name : String
  version : String
  private/publish : Boolean
  dependencies : Array<VersionedPackageSpec>
    name : String
    constraint : VersionConstraint
      // version must be >= minVersionOrNull, < maxVersionOrNull
      ( minVersionOrNull, maxVersionOrNull )
  devDependencies : (same)

  files:
    include: possible values:
      [ "**/*.js", ... ] // explicit list of globs
      null
        // auto-detect VCS (default), applying .gitignore
        // throws error if there are uncommitted files
    exclude: defaults to []
      // e.g. [ '/tests' ]

  // Not crucial but useful metadata:
  author : String
  description : String
  license : String
  license-file: String // default: [ 'LICENSE', 'LICENSE.*', ... ]
  homepage, documentation, bugs : String
  repository : Repository
  keywords : Array<String>

union VersionConstraint:
  Version
  Pair(Option<Version>, Option<Version>)

struct Version:
  // start with Steve's semver library, only allowing a.b.c
  // later we can maybe allow arbitrary number a.b.c.d.e

Later: Dependencies for platform:
  - hard to agree on what's a platform (unix, windows, mac? ruby, jruby? node, browser?)
  - have arbitrary set of platform tags, allow "dependencies.(!jruby && mac)"
  - print warning if no build-tool-supplied platform

Later: privateDependencies/staticDependencies

Later: externalDependencies
  e.g. rustc: ~1.1.2; like engine

Later: private registries
  registry URL
  access=restricted

Later: features?

Later: npm link scenarios
- workspaces: groups of related packages developed together
- git dependencies: committing interdependent work-in-progress for other people to test
- replace: pulling hotfixes into an app
  - redundant with git dependencies?
- .cargo/config: testing out fixes locally
